@using System.Text

@using Dropbox.Api
@using Dropbox.Api.Files

@using Microsoft.Extensions.Configuration

@inject HttpClient Http
@inject IConfiguration Configuration

<div>
  <h1>Blazor Lead Capture</h1>
  <form @onsubmit="OnFormSubmitted">
    <fieldset>
      <div>
        <label htmlFor="firstName">First name</label>
        <input type="text" name="firstName" id="firstName" placeholder="Justin" value="@firstName" />
      </div>
      <div>
        <label htmlFor="lastName">Last name</label>
        <input type="text" name="lastName" id="lastName" placeholder="Yoo" value="@lastName" />
      </div>
    </fieldset>

    <fieldset>
      <div>
        <label htmlFor="email">Email</label>
        <input type="email" id="email" name="email" placeholder="bar@email.com" value="@email" />
      </div>
      <div>
        <label htmlFor="phone">Phone</label>
        <input type="phone" id="phone" name="phone" placeholder="555-555-555" value="@phone" />
      </div>
    </fieldset>

    <fieldset>
      <button type="submit">Submit</button>
    </fieldset>
  </form>
</div>

<div>
  <h2>@message</h2>
</div>

@code {
    private string? firstName;
    private string? lastName;
    private string? email;
    private string? phone;
    private bool submitting;
    private string? message;

    protected async Task OnFormSubmitted(EventArgs e)
    {
        submitting = true;
        message = null;
    
        await SaveToDropbox().ConfigureAwait(false);
    }

    protected async Task OnFieldChanged(ChangeEventArgs e)
    {
        if (e.Value is string value)
        {
        }
    }

    private async Task SaveToDropbox()
    {
        var requestUrl = Configuration.GetValue<string>("APIM_Endpoint");
        var token = await Http.GetStringAsync(requestUrl).ConfigureAwait(false);
        var path = $"/submissions/{DateTimeOffset.UtcNow.ToString("yyyyMMddHHmmss")}.csv";
        var contents = $"{firstName},${lastName},${email},${phone}";
        var bytes = UTF8Encoding.UTF8.GetBytes(contents);

        var previewUrl = default(string);
        using(var dropbox = new DropboxClient(token))
        using(var stream = new MemoryStream(bytes))
        {
            var result = await dropbox.Files.UploadAsync(path, WriteMode.Overwrite.Instance, body: stream).ConfigureAwait(false);
            previewUrl = result.PreviewUrl;
        }

        if (string.IsNullOrWhiteSpace(previewUrl))
        {
            message = "Failed to save to Dropbox";
            return;
        }

        message = "Details have been saved";
    }
}