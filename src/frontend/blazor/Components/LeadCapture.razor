@using System.Text
@using Dropbox.Api
@using Dropbox.Api.Files
@using Microsoft.Extensions.Configuration
@using TokenStore.Models

@inject HttpClient Http
@inject IConfiguration Configuration

<div class="container-sm" style="max-width: 540px;">
  <h1>Blazor Lead Capture</h1>
  <form class="clearfix" @onsubmit="OnFormSubmittedAsync">
    <fieldset>
      <div>
        <label for="firstName" class="form-label">First name</label>
        <input type="text" class="form-control" id="firstName" name="firstName" placeholder="Justin" value="@userInfo.FirstName" @onchange="@(e => OnFieldChanged(e, "firstName"))" />
      </div>
      <div>
        <label for="lastName" class="form-label">Last name</label>
        <input type="text" class="form-control" id="lastName" name="lastName" placeholder="Yoo" value="@userInfo.LastName" @onchange="@(e => OnFieldChanged(e, "lastName"))" />
      </div>
    </fieldset>

    <fieldset>
      <div>
        <label htmlFor="email" class="form-label">Email</label>
        <input type="email" class="form-control" id="email" name="email" placeholder="bar@email.com" value="@userInfo.Email" @onchange="@(e => OnFieldChanged(e, "email"))" />
      </div>
      <div>
        <label htmlFor="phone" class="form-label">Phone</label>
        <input type="phone" class="form-control" id="phone" name="phone" placeholder="555-555-555" value="@userInfo.Phone" @onchange="@(e => OnFieldChanged(e, "phone"))" />
      </div>
    </fieldset>

    <fieldset>
      <button type="submit" class="btn btn-@componentUIInfo.ButtonColour" disabled="@(componentUIInfo.Submitting || string.IsNullOrWhiteSpace(userInfo.FirstName) || string.IsNullOrWhiteSpace(userInfo.LastName) || string.IsNullOrWhiteSpace(userInfo.Email) || string.IsNullOrWhiteSpace(userInfo.Phone))">
        <span>Submit</span>
        <span class="spinner-border spinner-border-sm" style="display:@componentUIInfo.DisplaySpinner;" role="status" aria-hidden="true"></span>
      </button>
    </fieldset>
  </form>

  <div class="alert alert-@componentUIInfo.AlertResult" style="display:@componentUIInfo.DisplayResult;">
    <h2>@componentUIInfo.MessageResult</h2>
    <button type="reset" class="btn btn-dark" @onclick="ResetFields">
      <span>Start Over?</span>
    </button>
  </div>
</div>

@code {
    private UserInfo userInfo = new UserInfo();
    private ComponentUIInfo componentUIInfo = new ComponentUIInfo();

    /// <inheritdoc />
    protected override async Task OnInitializedAsync()
    {
        userInfo = new UserInfo();
        componentUIInfo = new ComponentUIInfo();

        await Task.CompletedTask;
    }

    /// <summary>
    /// Invoked when any field value on the form changes.
    /// </summary>
    /// <param name="e"><see cref="ChangeEventArgs"/> instance.</param>
    /// <param name="fieldName">The field name that the change has occurred.</param>
    protected void OnFieldChanged(ChangeEventArgs e, string fieldName)
    {
        if (componentUIInfo.Submitting)
        {
            return;
        }

        switch (fieldName)
        {
            case "firstName":
                userInfo.FirstName = e.Value.ToString();
                break;
            case "lastName":
                userInfo.LastName = e.Value.ToString();
                break;
            case "email":
                userInfo.Email = e.Value.ToString();
                break;
            case "phone":
                userInfo.Phone = e.Value.ToString();
                break;
        }

        if (!componentUIInfo.Submitting &&
            !string.IsNullOrWhiteSpace(userInfo.FirstName) &&
            !string.IsNullOrWhiteSpace(userInfo.LastName) &&
            !string.IsNullOrWhiteSpace(userInfo.Email) &&
            !string.IsNullOrWhiteSpace(userInfo.Phone))
        {
            componentUIInfo.ButtonColour = "primary";

            return;
        }

        componentUIInfo.ButtonColour = "outline-primary";
    }

    /// <summary>
    /// Invoked when submitting the form.
    /// </summary>
    /// <param name="e"><see cref="EventArgs"/> instance.</param>
    protected async Task OnFormSubmittedAsync(EventArgs e)
    {
        componentUIInfo.ButtonColour = "outline-primary";
        componentUIInfo.Submitting = true;
        componentUIInfo.DisplaySpinner = "inline-block";

        await SaveToDropboxAsync().ConfigureAwait(false);
    }

    /// <summary>
    /// Invoked when the reset button clicks.
    /// </summary>
    /// <param name="e"><see cref="MouseEventArgs"/> instance.</param>
    protected void ResetFields(MouseEventArgs e)
    {
        userInfo = new UserInfo();
        componentUIInfo = new ComponentUIInfo();
    }

    private async Task SaveToDropboxAsync()
    {
        // Gets the APIM endpoint from appsettings.json
        var requestUrl = Configuration.GetValue<string>("APIM_Endpoint");
        
        // Gets the auth token from APIM
        var token = await Http.GetStringAsync(requestUrl).ConfigureAwait(false);

        // Builds contents.
        var path = $"/submissions/{DateTimeOffset.UtcNow.ToString("yyyyMMddHHmmss")}.csv";
        var contents = $"{userInfo.FirstName},{userInfo.LastName},{userInfo.Email},{userInfo.Phone}";
        var bytes = UTF8Encoding.UTF8.GetBytes(contents);

        // Uploads the contents.
        var result = default(FileMetadata);
        using(var dropbox = new DropboxClient(token))
        using(var stream = new MemoryStream(bytes))
        {
            result = await dropbox.Files.UploadAsync(path, WriteMode.Overwrite.Instance, body: stream).ConfigureAwait(false);
        }

        // Shows the result message box.
        if (string.IsNullOrWhiteSpace(result.ContentHash))
        {
            componentUIInfo.ButtonColour = "outline-primary";
            componentUIInfo.Submitting = true;
            componentUIInfo.DisplaySpinner = "none";

            componentUIInfo.AlertResult = "danger";
            componentUIInfo.MessageResult = "Failed to save to Dropbox";
            componentUIInfo.DisplayResult = "block";

            return;
        }

        componentUIInfo.ButtonColour = "outline-primary";
        componentUIInfo.Submitting = true;
        componentUIInfo.DisplaySpinner = "none";

        componentUIInfo.AlertResult = "success";
        componentUIInfo.MessageResult = "Details have been saved";
        componentUIInfo.DisplayResult = "block";
    }
}